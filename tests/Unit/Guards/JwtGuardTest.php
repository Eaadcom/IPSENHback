<?php


namespace Tests\Unit\Guards;


use App\guard\JwtGuard;
use App\Models\User;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Hash;
use Lcobucci\JWT\Token;
use Lcobucci\JWT\Token\Plain;
use Tests\TestCase;

class JwtGuardTest extends TestCase
{

    /**
     * @var JwtGuard
     */
    private $guard;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->guard = auth()->guard('api');
    }

    public function test_authenticate_throws_exception_for_unauthenticated_user()
    {
        $this->expectException(AuthenticationException::class);
        $this->guard->authenticate();
    }

    public function test_authenticate_returns_authenticated_user()
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $authenticate = $this->guard->authenticate();

        $this->assertEquals($authenticate, $user);
    }

    public function test_check_returns_false_for_unauthenticated_user()
    {
        $check = $this->guard->check();

        $this->assertFalse($check);
    }

    public function test_check_returns_authenticated_user()
    {
        $this->actingAs(User::factory()->create());

        $check = $this->guard->check();

        $this->assertTrue($check);
    }

    public function test_guest_returns_true_for_unauthenticated_user()
    {
        $guest = $this->guard->guest();

        $this->assertTrue($guest);
    }

    public function test_guest_returns_false_for_authenticated_user()
    {
        $this->actingAs(User::factory()->create());

        $guest = $this->guard->guest();

        $this->assertFalse($guest);
    }

    public function test_id_returns_null_for_unauthenticated_user()
    {
        $id = $this->guard->id();

        $this->assertNull($id);
    }

    public function test_id_returns_id_of_authenticated_user()
    {
        $user = User::factory()->create();
        $this->actingAs($user);

        $id = $this->guard->id();

        $this->assertEquals($id, $user->id);

    }

    public function test_attempt_returns_true_for_existing_user()
    {
        $password = $this->faker->password(8);

        $user = User::factory()->create([
            'password' => Hash::make($password)
        ]);

        $credentials = [
            'email' => $user->email,
            'password' => $password
        ];

        $attempt = $this->guard->attempt($credentials);

        $this->assertTrue($attempt);

    }

    public function test_attempt_returns_false_for_non_existing_user()
    {

        $password = $this->faker->password(8);

        $user = User::factory()->make([
            'password' => Hash::make($password)
        ]);

        $credentials = [
            'email' => $user->email,
            'password' => $password
        ];

        $attempt = $this->guard->attempt($credentials);

        $this->assertFalse($attempt);
    }

    public function test_attempt_generates_jwt_token()
    {
        $password = $this->faker->password(8);

        $user = User::factory()->create([
            'password' => Hash::make($password)
        ]);

        $credentials = [
            'email' => $user->email,
            'password' => $password
        ];

        $this->guard->attempt($credentials);
        $token = $this->guard->getToken();

        $this->assertNotNull($token);
    }

    public function test_generate_token_returns_token_object()
    {

        $user = User::factory()->make();

        $token = $this->guard->generateToken($user);

        $this->assertNotNull($token);
    }

    public function test_generate_token_has_user_claims()
    {

        /** @var User $user */
        $user = User::factory()->make();

        $token = $this->guard->generateToken($user)
            ->claims()
            ->all();

        $userClaims = collect($token)
            ->only(
                array_keys($user->getJwtClaims())
            )
            ->toArray();

        $this->assertEquals($userClaims, $user->getJwtClaims());
    }

    public function test_user_returns_the_authenticated_user()
    {
        $password = $this->faker->password(8);

        $user = User::factory()->create([
            'password' => Hash::make($password)
        ]);

        $credentials = [
            'email' => $user->email,
            'password' => $password
        ];

        $this->guard->attempt($credentials);

        $user = $this->guard->user();

        $this->assertNotNull($user);
    }

    public function test_user_returns_null_when_not_authenticated()
    {
        $user = $this->guard->user();

        $this->assertNull($user);
    }

    public function test_validate_return_true_for_existing_user()
    {
        $password = $this->faker->password(8);

        $user = User::factory()->create([
            'password' => Hash::make($password)
        ]);

        $credentials = [
            'email' => $user->email,
            'password' => $password
        ];

        $validated = $this->guard->validate($credentials);

        $this->assertTrue($validated);
    }

}
