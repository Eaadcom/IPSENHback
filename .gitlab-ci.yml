image: composer:2.0.11
stages:
  - building
  - testing
  - publishing
  - deploying

build:app:
  stage: building
  script:
    - php -v
    - composer install --prefer-dist --no-interaction --no-progress --no-scripts
  artifacts:
    paths:
      - vendor/
      - .env
    expire_in: 1 days
    when: always

test:phpunit:
  stage: testing
  script:
    - php ./vendor/phpunit/phpunit/phpunit --version
    - php ./vendor/phpunit/phpunit/phpunit
  artifacts:
    paths:
      - ./storage/logs # for debugging
    expire_in: 1 days
    when: on_failure
  except:
    - development
    - master

test:behat:
  stage: testing
  script:
    - php ./vendor/bin/behat --version
    - php ./vendor/bin/behat
  artifacts:
    paths:
      - ./storage/logs # for debugging
    expire_in: 1 days
    when: on_failure
  except:
    - development
    - master

publish:docker-staging:
  stage: publishing
  image: docker:19.03.12
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:19.03.0-dind
      command: ["--insecure-registry","gitlab.groep-7.xyz:5050"]
  script:
    - docker login -u $PROJECT_TOKEN_USERNAME -p $PROJECT_TOKEN_PASSWORD $CONTAINER_REGISTRY
    - docker build -t $STAGING_IMAGE_TAG:$CI_COMMIT_SHORT_SHA -t $STAGING_IMAGE_TAG:latest .
    - docker push $STAGING_IMAGE_TAG:$CI_COMMIT_SHORT_SHA
    - docker push $STAGING_IMAGE_TAG:latest
  environment:
    name: staging

publish:docker-production:
  stage: publishing
  image: docker:19.03.12
  variables:
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:19.03.0-dind
      command: ["--insecure-registry","gitlab.groep-7.xyz:5050"]
  script:
    - docker login -u $PROJECT_TOKEN_USERNAME -p $PROJECT_TOKEN_PASSWORD $CONTAINER_REGISTRY
    - docker build -t $PRODUCTION_IMAGE_TAG:$CI_COMMIT_SHORT_SHA -t $PRODUCTION_IMAGE_TAG:latest .
    - docker push $PRODUCTION_IMAGE_TAG:$CI_COMMIT_SHORT_SHA
    - docker push $PRODUCTION_IMAGE_TAG:latest
  only:
    - master
  environment:
    name: production

deploy:staging:
  stage: deploying
  image: alpine
  before_script:
    - apk add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  script:
    - ssh -o StrictHostKeychecking=no $SERVER_USER@$SERVER_IP "bash $DEPLOY_SCRIPT
      -u $PROJECT_TOKEN_USERNAME
      -p $PROJECT_TOKEN_PASSWORD
      -r $CONTAINER_REGISTRY
      -i $STAGING_IMAGE_TAG:latest
      -e staging -s staging_lumen"
  only:
    - staging
  environment:
    name: staging

deploy:production:
  stage: deploying
  image: alpine
  before_script:
    - apk add openssh-client
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
  script:
    - ssh -o StrictHostKeychecking=no $SERVER_USER@$SERVER_IP "bash $DEPLOY_SCRIPT
      -u $PROJECT_TOKEN_USERNAME
      -p $PROJECT_TOKEN_PASSWORD
      -r $CONTAINER_REGISTRY
      -i $PRODUCTION_IMAGE_TAG:latest
      -e production -s production_lumen"
  only:
    - master
  environment:
    name: production
